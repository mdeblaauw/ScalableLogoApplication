Resources:
  BucketImages:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - http://127.0.0.1:51103
              - http://demo-logo-classification.s3-website-eu-west-1.amazonaws.com
            AllowedMethods:
              - PUT
            AllowedHeaders:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  GetRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: scalableLogo-GetRestAPI

  GetRestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GetRestAPI
      ParentId: { "Fn::GetAtt": ["GetRestAPI", "RootResourceId"] }
      PathPart: get-url

  GetRestAPIMethod:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GetRestAPIResource
      RestApiId: !Ref GetRestAPI
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - 
          StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  GetRestAPIMethodOptions:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GetRestAPIResource
      RestApiId: !Ref GetRestAPI
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          -
            StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - 
          StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  GetRestAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref GetRestAPI
      StageName: prod
      DeploymentId: !Ref GetRestAPIDeployment

  GetRestAPIDeployment:
    DependsOn: 
      - GetRestAPIMethod
      - GetRestAPIMethodOptions
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GetRestAPI

  GetLambdaAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt GetLambda.Arn
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GetRestAPI}/*

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: lambdaSignURL
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:aws:s3:::${BucketImages}/*
      
  GetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambda_functions/get_function/index.js
      FunctionName: logoApplicationGetter
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs8.10
      Environment: 
        Variables:
          REGION: !Ref AWS::Region
          uploadBucket: !Ref BucketImages

        