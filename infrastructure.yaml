Description: This template includes infrastructure, modelFunction infrastructure and get label infrastructure
Parameters:
  EnvType:
    Description: Environment type
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: must specify prod or dev
  ProdVersion:
    Description: Product version
    Type: String

Conditions:
  CreateProdResource: !Equals [ !Ref EnvType, prod]
  CreateDevResource: !Equals [ !Ref EnvType, dev]

Resources:
  ImageBucketProd:
    Type: AWS::S3::Bucket
    Condition: CreateProdResource
    DeletionPolicy: Retain
    DependsOn:
      - ModelFunctionLambdaImageBucket
      - ModelFunctionLambda
    Properties:
      BucketName: !Sub image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
      NotificationConfiguration:
        LambdaConfigurations:
          - 
            Event: s3:ObjectCreated:Put
            Filter: 
              S3Key:
                Rules:
                  - 
                    Name: suffix
                    Value: .jpg
            Function: !GetAtt ModelFunctionLambda.Arn
          - 
            Event: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: .png
            Function: !GetAtt ModelFunctionLambda.Arn
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - !If ["CreateProdResource", "http://scalablelogorecognition.com",!GetAtt "WebsiteBucket.WebsiteURL"]
            AllowedMethods:
              - PUT
            AllowedHeaders:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ImageBucketDev:
    Type: AWS::S3::Bucket
    Condition: CreateDevResource
    DependsOn:
      - ModelFunctionLambdaImageBucket
      - ModelFunctionLambda
    Properties:
      BucketName: !Sub image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
      NotificationConfiguration:
        LambdaConfigurations:
          - 
            Event: s3:ObjectCreated:Put
            Filter: 
              S3Key:
                Rules:
                  - 
                    Name: suffix
                    Value: .jpg
            Function: !GetAtt ModelFunctionLambda.Arn
          - 
            Event: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: .png
            Function: !GetAtt ModelFunctionLambda.Arn
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - !If ["CreateProdResource", "http://scalablelogorecognition.com",!GetAtt "WebsiteBucket.WebsiteURL"]
            AllowedMethods:
              - PUT
            AllowedHeaders:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  GetRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: !Sub scalableLogo-GetRestAPI-${EnvType}

  GetRestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GetRestAPI
      ParentId: { "Fn::GetAtt": ["GetRestAPI", "RootResourceId"] }
      PathPart: get-url

  GetRestAPIMethod:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GetRestAPIResource
      RestApiId: !Ref GetRestAPI
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - 
          StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  GetRestAPIMethodOptions:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref GetRestAPIResource
      RestApiId: !Ref GetRestAPI
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          -
            StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - 
          StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  LabelRestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GetRestAPI
      ParentId: { "Fn::GetAtt": ["GetRestAPI", "RootResourceId"] }
      PathPart: get-label

  LabelRestAPIMethod:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref LabelRestAPIResource
      RestApiId: !Ref GetRestAPI
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - 
          StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  LabelRestAPIMethodOptions:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref LabelRestAPIResource
      RestApiId: !Ref GetRestAPI
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          -
            StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - 
          StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  SupportRestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GetRestAPI
      ParentId: { "Fn::GetAtt": ["GetRestAPI", "RootResourceId"] }
      PathPart: get-support-set

  SupportRestAPIMethod:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref SupportRestAPIResource
      RestApiId: !Ref GetRestAPI
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - 
          StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  SupportRestAPIMethodOptions:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref SupportRestAPIResource
      RestApiId: !Ref GetRestAPI
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          -
            StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - 
          StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  GetRestAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref GetRestAPI
      StageName: !Sub ${EnvType}
      DeploymentId: !Ref GetRestAPIDeployment

  GetRestAPIDeployment:
    DependsOn: 
      - GetRestAPIMethod
      - GetRestAPIMethodOptions
      - LabelRestAPIMethod
      - LabelRestAPIMethodOptions
      - SupportRestAPIMethod
      - SupportRestAPIMethodOptions
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GetRestAPI

  GetLambdaAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt GetLambda.Arn
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GetRestAPI}/*

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: lambdaSignURL
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:aws:s3:::image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}/*
              - 
                Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub arn:aws:s3:::${WebsiteBucket}
              -
                Effect: Allow
                Action: dynamodb:GetItem
                Resource: !If ["CreateProdResource", !GetAtt "OutputDatabaseProd.Arn", !GetAtt "OutputDatabaseDev.Arn"]
      
  GetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambda_functions/get_function/
      FunctionName: !Sub logoApplicationGetter-${AWS::AccountId}-${EnvType}
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs10.x
      Timeout: 10
      Environment: 
        Variables:
          REGION: !Ref AWS::Region
          uploadBucket: !Sub image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
          TableName: !If ["CreateProdResource", !Ref "OutputDatabaseProd", !Ref "OutputDatabaseDev"]
          websiteBucket: !Ref WebsiteBucket

  WWWBucket:
    Type: AWS::S3::Bucket
    Condition: CreateProdResource
    Properties:
      BucketName: www.scalablelogorecognition.com
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: scalablelogorecognition.com

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !If [CreateProdResource, scalablelogorecognition.com, logoapplication-website-39bk35l8]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If [CreateProdResource, scalablelogorecognition.com, logoapplication-website-39bk35l8]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      WebsiteConfiguration:
        IndexDocument: index.html

  PreparationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub preparation-logoapplication-${AWS::AccountId}-${EnvType}
      NotificationConfiguration:
        LambdaConfigurations:
          - 
            Event: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  - 
                    Name: suffix
                    Value: .zip
            Function: !GetAtt PreparationFunctionLambda.Arn
          -
            Event: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: .json
            Function: !GetAtt ModelFunctionLambda.Arn

  PreparationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreparationFunctionLambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}

  PreparationModelFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ModelFunctionLambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}

  OutputDatabaseProd:
    Type: AWS::DynamoDB::Table
    Condition: CreateProdResource
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub logoapplication-dynamodb-${AWS::AccountId}-${EnvType}-${ProdVersion}
      AttributeDefinitions:
        -
          AttributeName: ImageId
          AttributeType: S
      KeySchema:
        -
          AttributeName: ImageId
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  OutputDatabaseDev:
    Type: AWS::DynamoDB::Table
    Condition: CreateDevResource
    Properties:
      TableName: !Sub logoapplication-dynamodb-${AWS::AccountId}-${EnvType}-${ProdVersion}
      AttributeDefinitions:
        -
          AttributeName: ImageId
          AttributeType: S
      KeySchema:
        -
         AttributeName: ImageId
         KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  PytorchLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
      Content: ./lambda_functions/model_function/lambda_dependencies/pytorch1_0_1

  ModelFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: lambdaModelFunction
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              -
                Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}/*
                  - !Sub arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}
                  - !Sub arn:aws:s3:::image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}/*
                  - !Sub arn:aws:s3:::image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
              -
                Effect: Allow
                Action: dynamodb:PutItem
                Resource: !If ["CreateProdResource", !GetAtt "OutputDatabaseProd.Arn", !GetAtt "OutputDatabaseDev.Arn"]
      
  ModelFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambda_functions/model_function/lambda_files/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ModelFunctionLambdaRole.Arn
      Runtime: python3.6
      Layers: 
        - !Ref PytorchLambdaLayer
      MemorySize: 512
      Timeout: 60
      Environment: 
        Variables:
          TableName: !If ["CreateProdResource", !Ref "OutputDatabaseProd", !Ref "OutputDatabaseDev"]
          image_bucket: !Sub image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
          preparation_bucket: !Sub preparation-logoapplication-${AWS::AccountId}-${EnvType}

  ModelFunctionLambdaImageBucket:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ModelFunctionLambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}

  PreparationFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: lambdaPreparation
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              -
                Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}/*
                  - !Sub arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}
                  - !If ["CreateProdResource", !Sub "arn:aws:s3:::scalablelogorecognition.com/*", !Sub "arn:aws:s3:::logoapplication-website-39bk35l8/*"]
                  - !If ["CreateProdResource", !Sub "arn:aws:s3:::scalablelogorecognition.com", !Sub "arn:aws:s3:::logoapplication-website-39bk35l8"]

  PreparationFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambda_functions/preparation_function/lambda_files/
      Environment: 
        Variables:
          website_bucket: !If ["CreateProdResource", "scalablelogorecognition.com", "logoapplication-website-39bk35l8"]
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref PytorchLambdaLayer
      MemorySize: 2048
      Role: !GetAtt PreparationFunctionLambdaRole.Arn
      Runtime: python3.6
      Timeout: 120

Outputs:
  GetAPIURL:
    Description: URL of get API
    Value: !Sub https://${GetRestAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvType}
    Export:
      Name: !Sub GetApiURL-${EnvType}
  WebsiteUrl:
    Description: URL of the website
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: !Sub WebsiteURL-${EnvType}
  PreparationBucketName:
    Description: Name of bucket to dump preparation files
    Value: !Ref PreparationBucket
    Export:
      Name: !Sub PrepBucketName-${EnvType}

        