Description: This template includes infrastructure, modelFunction infrastructure and
  get label infrastructure
Parameters:
  EnvType:
    Description: Environment type
    Default: dev
    Type: String
    AllowedValues:
    - prod
    - dev
    ConstraintDescription: must specify prod or dev
  ProdVersion:
    Description: Product version
    Type: String
Conditions:
  CreateProdResource:
    Fn::Equals:
    - Ref: EnvType
    - prod
  CreateDevResource:
    Fn::Equals:
    - Ref: EnvType
    - dev
Resources:
  ImageBucketProd:
    Type: AWS::S3::Bucket
    Condition: CreateProdResource
    DeletionPolicy: Retain
    DependsOn:
    - ModelFunctionLambdaImageBucket
    - ModelFunctionLambda
    Properties:
      BucketName:
        Fn::Sub: image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .jpg
          Function:
            Fn::GetAtt:
            - ModelFunctionLambda
            - Arn
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .png
          Function:
            Fn::GetAtt:
            - ModelFunctionLambda
            - Arn
      CorsConfiguration:
        CorsRules:
        - AllowedOrigins:
          - Fn::If:
            - CreateProdResource
            - http://scalablelogorecognition.com
            - Fn::GetAtt:
              - WebsiteBucket
              - WebsiteURL
          AllowedMethods:
          - PUT
          AllowedHeaders:
          - '*'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ImageBucketDev:
    Type: AWS::S3::Bucket
    Condition: CreateDevResource
    DependsOn:
    - ModelFunctionLambdaImageBucket
    - ModelFunctionLambda
    Properties:
      BucketName:
        Fn::Sub: image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .jpg
          Function:
            Fn::GetAtt:
            - ModelFunctionLambda
            - Arn
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .png
          Function:
            Fn::GetAtt:
            - ModelFunctionLambda
            - Arn
      CorsConfiguration:
        CorsRules:
        - AllowedOrigins:
          - Fn::If:
            - CreateProdResource
            - http://scalablelogorecognition.com
            - Fn::GetAtt:
              - WebsiteBucket
              - WebsiteURL
          AllowedMethods:
          - PUT
          AllowedHeaders:
          - '*'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  GetRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Sub: scalableLogo-GetRestAPI-${EnvType}
  GetRestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GetRestAPI
      ParentId:
        Fn::GetAtt:
        - GetRestAPI
        - RootResourceId
      PathPart: get-url
  GetRestAPIMethod:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: GetRestAPIResource
      RestApiId:
        Ref: GetRestAPI
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: 200
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  GetRestAPIMethodOptions:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: GetRestAPIResource
      RestApiId:
        Ref: GetRestAPI
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  LabelRestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GetRestAPI
      ParentId:
        Fn::GetAtt:
        - GetRestAPI
        - RootResourceId
      PathPart: get-label
  LabelRestAPIMethod:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: LabelRestAPIResource
      RestApiId:
        Ref: GetRestAPI
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: 200
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  LabelRestAPIMethodOptions:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: LabelRestAPIResource
      RestApiId:
        Ref: GetRestAPI
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  SupportRestAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GetRestAPI
      ParentId:
        Fn::GetAtt:
        - GetRestAPI
        - RootResourceId
      PathPart: get-support-set
  SupportRestAPIMethod:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: SupportRestAPIResource
      RestApiId:
        Ref: GetRestAPI
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLambda.Arn}/invocations
        IntegrationResponses:
        - StatusCode: 200
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Origin: false
  SupportRestAPIMethodOptions:
    DependsOn: GetLambdaAPIPermission
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: SupportRestAPIResource
      RestApiId:
        Ref: GetRestAPI
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: Empty
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  GetRestAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: GetRestAPI
      StageName:
        Fn::Sub: ${EnvType}
      DeploymentId:
        Ref: GetRestAPIDeployment
  GetRestAPIDeployment:
    DependsOn:
    - GetRestAPIMethod
    - GetRestAPIMethodOptions
    - LabelRestAPIMethod
    - LabelRestAPIMethodOptions
    - SupportRestAPIMethod
    - SupportRestAPIMethodOptions
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: GetRestAPI
  GetLambdaAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Fn::GetAtt:
        - GetLambda
        - Arn
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GetRestAPI}/*
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: lambdaSignURL
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
            - Fn::Sub: arn:aws:s3:::image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}/*
          - Effect: Allow
            Action: s3:ListBucket
            Resource:
              Fn::Sub: arn:aws:s3:::${WebsiteBucket}
          - Effect: Allow
            Action: dynamodb:GetItem
            Resource:
              Fn::If:
              - CreateProdResource
              - Fn::GetAtt:
                - OutputDatabaseProd
                - Arn
              - Fn::GetAtt:
                - OutputDatabaseDev
                - Arn
  GetLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: logoapplication-lambdafiles-34fl9as0
        S3Key: 8bb177db5affb97bffdc177374813b43
      FunctionName:
        Fn::Sub: logoApplicationGetter-${AWS::AccountId}-${EnvType}
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: nodejs10.x
      Timeout: 10
      Environment:
        Variables:
          REGION:
            Ref: AWS::Region
          uploadBucket:
            Fn::Sub: image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
          TableName:
            Fn::If:
            - CreateProdResource
            - Ref: OutputDatabaseProd
            - Ref: OutputDatabaseDev
          websiteBucket:
            Ref: WebsiteBucket
  WWWBucket:
    Type: AWS::S3::Bucket
    Condition: CreateProdResource
    Properties:
      BucketName: www.scalablelogorecognition.com
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: scalablelogorecognition.com
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Fn::If:
        - CreateProdResource
        - scalablelogorecognition.com
        - logoapplication-website-39bk35l8
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${WebsiteBucket.Arn}/*
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::If:
        - CreateProdResource
        - scalablelogorecognition.com
        - logoapplication-website-39bk35l8
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      WebsiteConfiguration:
        IndexDocument: index.html
  PreparationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: preparation-logoapplication-${AWS::AccountId}-${EnvType}
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .zip
          Function:
            Fn::GetAtt:
            - PreparationFunctionLambda
            - Arn
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .json
          Function:
            Fn::GetAtt:
            - ModelFunctionLambda
            - Arn
  PreparationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - PreparationFunctionLambda
        - Arn
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}
  PreparationModelFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - ModelFunctionLambda
        - Arn
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}
  OutputDatabaseProd:
    Type: AWS::DynamoDB::Table
    Condition: CreateProdResource
    DeletionPolicy: Retain
    Properties:
      TableName:
        Fn::Sub: logoapplication-dynamodb-${AWS::AccountId}-${EnvType}-${ProdVersion}
      AttributeDefinitions:
      - AttributeName: ImageId
        AttributeType: S
      KeySchema:
      - AttributeName: ImageId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  OutputDatabaseDev:
    Type: AWS::DynamoDB::Table
    Condition: CreateDevResource
    Properties:
      TableName:
        Fn::Sub: logoapplication-dynamodb-${AWS::AccountId}-${EnvType}-${ProdVersion}
      AttributeDefinitions:
      - AttributeName: ImageId
        AttributeType: S
      KeySchema:
      - AttributeName: ImageId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  PytorchLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
      - python3.6
      Content:
        S3Bucket: logoapplication-lambdafiles-34fl9as0
        S3Key: a0c79649eb07d80d375b9622c45887df
  ModelFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: lambdaModelFunction
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListBucket
            Resource:
            - Fn::Sub: arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}/*
            - Fn::Sub: arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}
            - Fn::Sub: arn:aws:s3:::image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}/*
            - Fn::Sub: arn:aws:s3:::image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource:
              Fn::If:
              - CreateProdResource
              - Fn::GetAtt:
                - OutputDatabaseProd
                - Arn
              - Fn::GetAtt:
                - OutputDatabaseDev
                - Arn
  ModelFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: logoapplication-lambdafiles-34fl9as0
        S3Key: d595d9778f78027673ff27574bb38a70
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
        - ModelFunctionLambdaRole
        - Arn
      Runtime: python3.6
      Layers:
      - Ref: PytorchLambdaLayer
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          TableName:
            Fn::If:
            - CreateProdResource
            - Ref: OutputDatabaseProd
            - Ref: OutputDatabaseDev
          image_bucket:
            Fn::Sub: image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
          preparation_bucket:
            Fn::Sub: preparation-logoapplication-${AWS::AccountId}-${EnvType}
  ModelFunctionLambdaImageBucket:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - ModelFunctionLambda
        - Arn
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::image-logoapplication-${AWS::AccountId}-${EnvType}-${ProdVersion}
  PreparationFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: lambdaPreparation
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:DeleteObject
            - s3:ListBucket
            - s3:PutObject
            Resource:
            - Fn::Sub: arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}/*
            - Fn::Sub: arn:aws:s3:::preparation-logoapplication-${AWS::AccountId}-${EnvType}
            - Fn::If:
              - CreateProdResource
              - Fn::Sub: arn:aws:s3:::scalablelogorecognition.com/*
              - Fn::Sub: arn:aws:s3:::logoapplication-website-39bk35l8/*
            - Fn::If:
              - CreateProdResource
              - Fn::Sub: arn:aws:s3:::scalablelogorecognition.com
              - Fn::Sub: arn:aws:s3:::logoapplication-website-39bk35l8
  PreparationFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: logoapplication-lambdafiles-34fl9as0
        S3Key: d989e32d0b2ea972c28d406a1d75fcbf
      Environment:
        Variables:
          website_bucket:
            Fn::If:
            - CreateProdResource
            - scalablelogorecognition.com
            - logoapplication-website-39bk35l8
      Handler: lambda_function.lambda_handler
      Layers:
      - Ref: PytorchLambdaLayer
      MemorySize: 2048
      Role:
        Fn::GetAtt:
        - PreparationFunctionLambdaRole
        - Arn
      Runtime: python3.6
      Timeout: 120
Outputs:
  GetAPIURL:
    Description: URL of get API
    Value:
      Fn::Sub: https://${GetRestAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvType}
    Export:
      Name:
        Fn::Sub: GetApiURL-${EnvType}
  WebsiteUrl:
    Description: URL of the website
    Value:
      Fn::GetAtt:
      - WebsiteBucket
      - WebsiteURL
    Export:
      Name:
        Fn::Sub: WebsiteURL-${EnvType}
  PreparationBucketName:
    Description: Name of bucket to dump preparation files
    Value:
      Ref: PreparationBucket
    Export:
      Name:
        Fn::Sub: PrepBucketName-${EnvType}
