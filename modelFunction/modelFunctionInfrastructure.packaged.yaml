Resources:
  PreparationBucket:
    Type: AWS::S3::Bucket
    Properties: {}
  ImageBucket:
    Type: AWS::S3::Bucket
    DependsOn:
    - ModelFunctionLambdaImageBucket
    - ModelFunctionLambda
    Properties:
      BucketName:
        Fn::Sub: image-logoapplication-${AWS::AccountId}
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .jpg
          Function:
            Fn::GetAtt:
            - ModelFunctionLambda
            - Arn
        - Event: s3:ObjectCreated:Put
          Filter:
            S3Key:
              Rules:
              - Name: suffix
                Value: .png
          Function:
            Fn::GetAtt:
            - ModelFunctionLambda
            - Arn
  OutputDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: ImageId
        AttributeType: S
      - AttributeName: Timestamp
        AttributeType: N
      KeySchema:
      - AttributeName: ImageId
        KeyType: HASH
      - AttributeName: Timestamp
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  PytorchLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
      - python3.6
      Content:
        S3Bucket: logoapplication-lambdafiles-34fl9as0
        S3Key: a0c79649eb07d80d375b9622c45887df
  ModelFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: lambdaModelFunction
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:ListBucket
            Resource:
            - Fn::Sub: ${PreparationBucket.Arn}/*
            - Fn::Sub: ${PreparationBucket.Arn}
            - Fn::Sub: arn:aws:s3:::image-logoapplication-${AWS::AccountId}/*
            - Fn::Sub: arn:aws:s3:::image-logoapplication-${AWS::AccountId}
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource:
              Fn::GetAtt:
              - OutputDatabase
              - Arn
  ModelFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: logoapplication-lambdafiles-34fl9as0
        S3Key: 363a2f296e3210ff2e59a83b1b44d8de
      Handler: lambda_function.lambda_handler
      Role:
        Fn::GetAtt:
        - ModelFunctionLambdaRole
        - Arn
      Runtime: python3.6
      Layers:
      - Ref: PytorchLambdaLayer
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          TableName:
            Ref: OutputDatabase
          image_bucket:
            Fn::Sub: image-logoapplication-${AWS::AccountId}
          preparation_bucket:
            Ref: PreparationBucket
  ModelFunctionLambdaImageBucket:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - ModelFunctionLambda
        - Arn
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::image-logoapplication-${AWS::AccountId}
